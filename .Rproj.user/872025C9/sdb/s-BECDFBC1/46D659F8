{
    "collab_server" : "",
    "contents" : "#-----SETUP-----\npackages <- function(){\n  if (!require(\"devtools\")) install.packages(\"devtools\")\n  if(!require(\"elmr\")) devtools::install_github(\"jefferis/elmr\", dependencies=TRUE)\n  if(!require(\"catmaid\")) devtools::install_github(\"jefferis/rcatmaid\")\n}\ncatmaidURLs <- function(){\n  URLs = character(0)\n  names(URLs) = character(0)\n  \n  URLs[\"volumes\"] = \"/1/volumes/\"\n  URLs[\"skeletons\"] = \"/1/skeletons/\"\n  URLs[\"analytics\"] = \"/1/analytics/skeletons\"\n  \n  return(URLs)\n}\ngetEndpoint <- function(name){\n  return(catmaidURLs()[name])\n  \n}\n\n#-----UTILITIES-----\nquickNBLAST <- function(skid){\n  packages()\n  if(!require(\"doMC\")) install.packages(\"doMC\")\n  registerDoMC(4)\n  dps = read.neuronlistfh(\"http://flybrain.mrc-lmb.cam.ac.uk/si/nblast/flycircuit/dpscanon.rds\", localdir = getOption('flycircuit.datadir'))\n  \n  results = nblast_fafb(skid)\n}\n\n#TODO - connectors option?\ncatmaidPlot <- function(skid, volumes = NULL, ncol = NULL, vcol = NULL, valpha = NULL){#single skid as numeric, multiples in character vector\n  packages()\n  neurons = read.neurons.catmaid(skid)\n  plot3d(neurons, WithConnectors = F, soma = 2000, col = ncol)\n  if (!is.null(volumes)){\n    plotVolumes(volumes, vcol, valpha)\n  }\n  \n  invisible(neurons)#returned in case you want to do anything else with them, but not printed to console\n}\n\n\n\n#-----INTERNAL METHODS-----\n#TODO - add colour/alpha specification\nplotVolumes <- function(volumes, vcol, valpha){#plot multiple neuropil volumes at once in same space as CATMAID neurons - get volumes from catmaid sever?\n  vols.df = catmaidVolsAsDF()\n  volumes.ids = vols.df[match(volumes, vols.df$name), 'id']#preserves order, c.f. vols.df$name %in% volumes\n  \n  #fil out colour and alpha specifications\n  if (!is.null(vcol)){\n    if (length(vcol) < length(volumes)) vcol = rep(vcol, length.out = length(volumes))\n  }\n  else{\n    vcol = rep(\"gray\", length(volumes))\n  }\n  \n  if (!is.null(valpha)){\n    if (length(valpha) < length(volumes)) valpha = rep(valpha, length.out = length(volumes))\n  }\n  else{\n    valpha = rep(0.5, length(volumes))\n  }\n  \n  \n  for (id in 1:length(volumes.ids)){\n    if (is.na(volumes.ids[id])){\n      warning(paste(\"Volume \\\"\", volumes[id], \"\\\" was not found.\", sep = \"\"))\n      next\n    }\n    urlstr = paste(\"/1/volumes/\", as.character(volumes.ids[id]), sep=\"\")\n    details = catmaid_fetch(urlstr)\n    #horrible string parsing\n    v1 = details$mesh\n    v2 = strsplit(v1, \"<\")\n    v3 = strsplit(v2[[1]][3], \"Coordinate point='\", fixed=TRUE)\n    v4 = strsplit(v3[[1]][2], \" \")\n    v5 = as.numeric(v4[[1]])\n    #split into groups of 3\n    seq = seq_along(v5)\n    points = split(v5, ceiling(seq/3))\n    \n    len = length(points)\n    x = numeric(len)\n    y = numeric(len)\n    z = numeric(len)\n    for (i in 1:len){\n      x[i] = points[[i]][1]\n      y[i] = points[[i]][2]\n      z[i] = points[[i]][3]\n    }\n    points.df = data.frame(x,y,z)\n    points.matrix = data.matrix(points.df)#go straight from vectors instead?\n    \n    \n    triangles3d(x = points.df[,'x'], y = points.df[, 'y'], z = points.df[, 'z'], col = vcol[id], alpha = valpha[id])\n    \n  }\n  \n\n}\n\ncatmaidVolsAsDF <- function(){\n  \n  vols = catmaid_fetch(getEndpoint(\"volumes\"))\n  l = length(vols)\n  \n  comment = character(l)\n  name = character(l)\n  creation_time = character(l)\n  edition_time = character(l)\n  project = integer(l)\n  user = integer(l)\n  id = integer(l)\n  editor = integer(l)\n  \n  for (i in 1:l){#there has got to be a better way of doing this...\n    row = vols[[i]]\n    comment[i] = if (!is.null(row$comment)) row$comment else \"\"\n    name[i] = if (!is.null(row$name)) row$name else \"\"\n    creation_time[i] = if (!is.null(row$creation_time)) row$creation_time else \"\"\n    edition_time[i] = if (!is.null(row$edition_time)) row$edition_time else \"\"\n    project[i] = row$project\n    user[i] = row$user\n    id[i] = row$id\n    editor[i] = row$editor\n  }\n  \n  vols.df = data.frame(comment, name, creation_time, edition_time, project, user, id, editor, stringsAsFactors = FALSE)\n  \n}\n",
    "created" : 1485528401218.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "2094628639",
    "id" : "46D659F8",
    "lastKnownWriteTime" : 1485526968,
    "last_content_update" : 1485526968,
    "path" : "~/projects/tracerutils/R/tracerutils.R",
    "project_path" : "R/tracerutils.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}