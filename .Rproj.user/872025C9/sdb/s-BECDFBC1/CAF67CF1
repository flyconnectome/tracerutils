{
    "collab_server" : "",
    "contents" : "checkMine <- function(dateSince, user){#date format as YYYMMDD string, user as login name\n  packagesAndSetup()\n  \n  #htmlStrings = c(toHeader(paste0(\"Checking neurons for user \", user, \" since \", dateSince), 2), \"<br>\")\n  print(paste0(\"Checking neurons for user \", user, \" since \", dateSince))\n    \n  mySkeletons = getSince(dateSince, user = user)\n  neurons = read.neurons.catmaid(mySkeletons)\n  \n  \n  \n  for (i in 1:length(neurons)){\n    #print(paste(\"Neuron \", names(neurons)[i], sep  = \"\"))\n    #htmlStrings = append(htmlStrings, toHeader(paste0(\"SKID \", names(neurons)[i]), 4))\n    print(paste0(\"SKID \", names(neurons)[i]))\n    \n    neuron = neurons[i]\n    issuesfound = FALSE\n    #check for duplicate soma tags and radius set on a node without soma tag\n    issuesfound = checkDuplicateSomas(neuron, htmlStrings) & checkRadiusWithoutSoma(neuron, htmlStrings)\n    \n    #check skeleton analytics\n    #analytics checks for eight possible issues, but we only care about a few of them for now\n    #0 - autapse\n    #1 - Two or more times postsynaptic to the same connector\n    #2 - Connector without postsynaptic targets\n    #3 - Connector without presynaptic skeleton\n    #4 - Duplicated synapse?\n    #5 - End node without end tag\n    #6 - TODO tag\n    #7 - End-node tag in a non-end node\n    #8 - Node in broken section\n    #for now, we'll check for 0, 1, 3, 4, and 7\n    \n    #body = list(0)\n    for (skid in 1:length(mySkeletons)){\n      #nothing for now - move outside loop and assemble body string to minimise server calls\n    }\n    \n    analytics = catmaid_fetch(\"/1/analytics/skeletons\", body = list(\"skeleton_ids[0]\"=names(neurons)[i]))\n    issues = analytics$issues[[1]][[2]]#modify to handle for each neuron\n    \n    issue_code = numeric(length(issues))\n    node = numeric(length(issues))\n    for (n in 1:length(issues)){#check that this order is consistent\n      issue_code[n] = issues[[n]][[1]]\n      node[n] = issues[[n]][[2]]\n    }\n    issues.df = data.frame(issue_code, node)\n    \n    problems = issues.df[issues.df$issue_code %in% c(0, 1, 3, 4, 7),]\n    autapse = issues.df[issues.df$issue_code == 0,]\n    double_post = issues.df[issues.df$issue_code == 1,]\n    no_pre = issues.df[issues.df$issue_code == 3,]\n    dup_syn = issues.df[issues.df$issue_code == 4,]\n    end_in_non_end = issues.df[issues.df$issue_code == 7,]\n    \n    if (nrow(problems) > 0){\n      #print(problems)\n      #if(nrow(autapse) > 0) htmlStrings = append(htmlStrings, toParagraph(paste(\"Autapse at node(s) \", paste(autapse[,'node'], collapse = \", \"), sep = \"\")))\n      if(nrow(autapse) > 0) print(paste(\"Autapse at node(s) \", paste(autapse[,'node'], collapse = \", \"), sep = \"\"))\n      #if(nrow(double_post) > 0) htmlStrings = append(htmlStrings, toParagraph(paste(\"Two or more nodes postsynaptic to the same connector at node(s) \", paste(double_post[,'node'], collapse = \", \"), sep = \"\")))\n      if(nrow(double_post) > 0) print(paste(\"Two or more nodes postsynaptic to the same connector at node(s) \", paste(double_post[,'node'], collapse = \", \"), sep = \"\"))\n      #if(nrow(no_pre) > 0) htmlStrings = append(htmlStrings, toParagraph(paste(\"Connector without presynaptic skeleton at node(s) \", paste(no_pre[,'node'], collapse = \", \"), sep = \"\")))\n      if(nrow(no_pre) > 0) print(paste(\"Connector without presynaptic skeleton at node(s) \", paste(no_pre[,'node'], collapse = \", \"), sep = \"\"))\n      #if(nrow(dup_syn) > 0) htmlStrings = append(htmlStrings, toParagraph(paste(\"Possible duplicate synapse at node(s) \", paste(dup_syn[,'node'], collapse = \", \"), sep = \"\")))\n      if(nrow(dup_syn) > 0) print(paste(\"Possible duplicate synapse at node(s) \", paste(dup_syn[,'node'], collapse = \", \"), sep = \"\"))\n      #if(nrow(end_in_non_end) > 0) htmlStrings = append(htmlStrings, toParagraph(paste(\"End tag in non-end node at node(s) \", paste(end_in_non_end[,'node'], collapse = \", \"), sep = \"\")))\n      if(nrow(end_in_non_end) > 0) print(paste(\"End tag in non-end node at node(s) \", paste(end_in_non_end[,'node'], collapse = \", \"), sep = \"\"))\n      issuesfound = TRUE\n    }\n    \n    #if (issuesfound == FALSE) htmlStrings = append(htmlStrings, toParagraph(\"Looks good!\"))\n    if (issuesfound == FALSE) print(\"Looks good!\")\n  }\n  \n  #file.create(\"output.html\")\n  #output = file(\"output.html\")\n  #writeLines(htmlStrings, output)\n  #close(output)\n}\n\ngetSince <- function(dateSince, user = 'all'){#date format as YYYMMDD string, user as login name\n  #TODO: add to date param, default to today as format(Sys.Date(), '%Y%m%d')\n  \n  if (user != 'all'){\n    ul = catmaid_get_user_list()\n    uid = ul[ul$login == user,]$id #there's probably a much better way of doing this...\n    userparam = paste(\"&created_by=\", uid, sep = '')\n  }\n  else{\n    userparam = ''\n  }\n  \n  \n  skeletons = catmaid_fetch(paste(\"/1/skeletons/?nodecount_gt=1&from=\", dateSince, userparam, sep = ''))\n}\n\n\n#-----INTERNALS-----\npackagesAndSetup <- function(){\n  packages() #requires tracerutils\n}\n\ncheckDuplicateSomas <- function(neuron, file){\n  issuesfound = FALSE\n  if ((!is.null(neuron$tags$soma)) & length(neuron$tags$soma) > 1){\n    #file = append(file, toParagraph(paste(\"Duplicate somas at nodes \", paste(neuron$tags$soma, collapse = \", \"), sep = \"\")))#or, you know, actually do something useful like generate a URL\n    print(paste(\"Duplicate somas at nodes \", paste(neuron$tags$soma, collapse = \", \"), sep = \"\"))\n    issuesfound = TRUE\n  }\n  #file = append(file, \"checked for duplicate somas\")\n  return(issuesfound)\n}\n\ncheckRadiusWithoutSoma <- function(neuron, file){\n  issuesfound = FALSE\n  radpoints = neuron$d[neuron$d$W > -2, 'PointNo']\n  if (length(radpoints) > 0){\n    notsoma = numeric(0)\n    if (!is.null(neuron$tags$soma)){\n      for (i in 1:length(radpoints)){\n        if (radpoints[i] %in% neuron$tags$soma) next\n        notsoma = c(notsoma, radpoints[i])\n      }\n    }\n    else{\n      notsoma = radpoints\n    }\n    if (length(notsoma) > 0){\n      #file = append(file, toParagraph(paste(\"Point(s) \", notsoma, \" have a radius but no soma tag\", sep = \"\")))\n      print(paste(\"Point(s) \", notsoma, \" have a radius but no soma tag\", sep = \"\"))\n      issuesfound = TRUE\n    } \n  }\n  #file = append(file, \"checked for missing soma tags\")\n  return(issuesfound)\n}\n\ngetURLForNode <- function(nodeID, skid = NULL, coord = NULL, project = 1, base = getOption(\"catmaid.server\")){ #TODO - handle multiple nodes to minimise server calls - pass data frame of node/skid/coords?\n  #get coordinates\n  if (is.null(coord)){\n    \n  }\n  #get skid\n  if (is.null(skid)){\n    \n  }\n  #assemble URL\n  \n}",
    "created" : 1485528397035.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3983126048",
    "id" : "CAF67CF1",
    "lastKnownWriteTime" : 1485526968,
    "last_content_update" : 1485526968,
    "path" : "~/projects/tracerutils/R/reviewScript.R",
    "project_path" : "R/reviewScript.R",
    "properties" : {
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}